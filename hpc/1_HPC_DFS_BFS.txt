#include<iostream>
#include<omp.h>
#include<vector>
#include<queue>
#include<chrono>
using namespace std;
using namespace std:: chrono;

class Graph{
    private:
        int V;
        vector<vector<int>>adj;
    public:
    
        Graph(int V):V(V),adj(V){}
    
        void addEdge(int v,int w){
            adj[v].push_back(w);
        }
        
    // sequential BFS
        void sBFS(int startvertex){
            vector<bool>visited(V,false);
            queue<int>q;
            visited[startvertex]=true;
            q.push(startvertex);
            
            while(!q.empty()){
                int parent=q.front();
                q.pop();
                cout<<parent<<" ";
                for(int i=0;i<adj[parent].size();i++){
                    int child=adj[parent][i];
                    if(!visited[child]){
                        visited[child]=true;
                        q.push(child);
                    }
                }
            }
            
        }
    //Parallet bfs
        void pBFS(int startvertex){
            vector<bool>visited(V,false);
            queue<int>q;
            visited[startvertex]=true;
            q.push(startvertex);
            
            while(!q.empty()){
                int parent=q.front();
                q.pop();
                cout<<parent<<" ";
                #pragma omp parallel for
                for(int i=0;i<adj[parent].size();i++){
                    int child=adj[parent][i];
                    if(!visited[child]){
                        visited[child]=true;
                        q.push(child);
                    }
                }
            }
            
        }
    // sequential dfs
        void sDFS(int startvertex){
            vector<bool>visited(V,false);
            sDFSuntil(startvertex,visited);
        }
        void sDFSuntil(int startvertex,vector<bool>&visited){
            visited[startvertex]=true;
            cout<<startvertex<<" ";
            for(int i=0;i<adj[startvertex].size();i++){
                    int child=adj[startvertex][i];
                    if(!visited[child]){
                       sDFSuntil(child,visited);
                    }
        }
        }
    //parallel dfs
    void pDFS(int startvertex){
        vector<bool>visited(V,false);
        pDFSuntil(startvertex,visited);
    }
    void pDFSuntil(int startvertex,vector<bool>&visited){
        visited[startvertex]=true;
        cout<<startvertex<<" ";
        #pragma omp parallel for
        for(int i=0;i<adj[startvertex].size();i++){
                int child=adj[startvertex][i];
                if(!visited[child]){
                   pDFSuntil(child,visited);
                }
      }
    }
};

int main(){
    Graph g(7);
    g.addEdge(0,1);
    g.addEdge(0,2);
    g.addEdge(1,3);
    g.addEdge(1,4);
    g.addEdge(2,5);
    g.addEdge(2,6);
    
    auto start=high_resolution_clock::now();
    g.sBFS(0);
    auto end=high_resolution_clock::now();
    double t=duration_cast<duration<double>>(end-start).count();
    cout<<"sbfs: "<<t<<endl;
    
     start=high_resolution_clock::now();
    g.pBFS(0);
     end=high_resolution_clock::now();
      t=duration_cast<duration<double>>(end-start).count();
    cout<<"pbfs: "<<t<<endl;
    
     start=high_resolution_clock::now();
    g.sDFS(0);
     end=high_resolution_clock::now();
     t=duration_cast<duration<double>>(end-start).count();
    cout<<"sdfs: "<<t<<endl;
    
     start=high_resolution_clock::now();
    g.pDFS(0);
     end=high_resolution_clock::now();
     t=duration_cast<duration<double>>(end-start).count();
    cout<<"pdfs: "<<t<<endl;
}
/*
The time complexity of the provided code depends on the graph traversal algorithm being used and whether it's sequential or parallel. Let's analyze each case separately:

### Sequential Depth-First Search (DFS):
- Time Complexity: \(O(V + E)\)
  - \(V\) is the number of vertices in the graph.
  - \(E\) is the number of edges in the graph.
- Each vertex is visited once, and each edge is explored once.

### Parallel Depth-First Search (DFS):
- Time Complexity: \(O(V + E)\) (same as sequential DFS)
- Although the traversal is performed in parallel, the fundamental operation of visiting each vertex and exploring each edge remains the same.

### Sequential Breadth-First Search (BFS):
- Time Complexity: \(O(V + E)\)
- Similar to DFS, BFS also visits each vertex and explores each edge once.

### Parallel Breadth-First Search (BFS):
- Time Complexity: \(O(V + E)\) (same as sequential BFS)
- Like DFS, the parallel version of BFS explores each vertex and edge once, even though the traversal is parallelized.

g++ -o executable_name source_file.cpp -std=c++11 -fopenmp
./executable_name

*/